// Generated by SolidPython 1.0.0 on 2020-07-07 20:30:16
$fn = 48;


difference() {
	offset(r = -0.0500000000) {
		offset(r = 0.0500000000) {
			intersection() {
				union() {
					difference() {
						polygon(paths = [[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106]], points = [[-0.7632427051, 0.2050650804], [-0.9252926022, -0.2020852745], [-0.9700093450, 0.2657206375], [-1.1058794483, 0.3001181310], [-1.1884334351, -0.4411478544], [-0.8117808703, -0.4411478544], [-0.7722237516, -0.5460602097], [-0.6776306417, -0.4641757189], [-0.5510023797, -0.4566267265], [-0.3078575758, 0.1848865277], [0.1066322330, 0.2657206375], [0.0569511884, 0.2052134825], [0.0145369922, 0.1394080272], [-0.0200506819, 0.0691726032], [-0.0463554343, -0.0045660027], [-0.0640301625, -0.0808347772], [-0.0728416407, -0.1586273208], [-0.0726735976, -0.2369171270], [-0.0635282506, -0.3146711276], [-0.0455262766, -0.3908633249], [-0.0189052195, -0.4644883295], [0.0159836444, -0.5345746275], [0.0586799413, -0.6001973996], [0.1086202749, -0.6604907249], [0.1651456608, -0.7146590065], [0.2275102219, -0.7619874706], [0.2948910307, -0.8018515973], [0.3663989680, -0.8337253621], [0.4410904555, -0.8571881769], [0.5179799066, -0.8719304397], [0.5960527313, -0.8777576197], [0.6742787248, -0.8745928249], [0.7516256611, -0.8624778160], [0.8270729136, -0.8415724560], [0.8996249230, -0.8121526001], [0.9683243339, -0.7746064562], [1.0322646278, -0.7294294619], [1.0906020845, -0.6772177473], [1.1425669159, -0.6186602689], [1.1874734235, -0.5545297180], [1.2247290464, -0.4856723251], [1.2538421803, -0.4129966935], [1.2744286648, -0.3374618099], [1.2862168523, -0.2600643899], [1.2890511924, -0.1818257261], [1.2828942849, -0.1037782119], [1.2678273729, -0.0269517181], [1.2440492707, 0.0476399962], [1.2118737408, 0.1190126609], [1.1717253534, 0.1862244826], [1.1241338838, 0.2483885720], [1.0697273223, 0.3046846469], [1.0092235871, 0.3543698562], [0.9434210513, 0.3967885817], [0.8731880081, 0.4313810899], [0.7994512130, 0.4576909178], [0.7231836552, 0.4753708955], [0.6453917182, 0.4841877282], [0.5671019007, 0.4840250738], [-0.5637372369, 0.4166096656], [-0.5695745093, 0.4278787376], [-0.5763062890, 0.4386374027], [-0.5838882455, 0.4488148123], [-0.5922704499, 0.4583439456], [-0.6013977030, 0.4671620510], [-0.6112098998, 0.4752110588], [-0.6216424243, 0.4824379645], [-0.6326265757, 0.4887951769], [-0.6440900207, 0.4942408322], [-0.6559572695, 0.4987390694], [-0.6681501733, 0.5022602664], [-0.6805884387, 0.5047812354], [-0.6931901567, 0.5062853750], [-0.7058723417, 0.5067627802], [-0.7185514783, 0.5062103071], [-0.7311440712, 0.5046315938], [-0.7435671951, 0.5020370366], [-0.7557390403, 0.4984437214], [-0.7675794524, 0.4938753109], [-0.7790104592, 0.4883618894], [-0.7899567845, 0.4819397642], [-0.8003463442, 0.4746512264], [-0.8101107202, 0.4665442731], [-0.8191856118, 0.4576722905], [-0.8275112585, 0.4480937029], [-0.8350328337, 0.4378715878], [-0.8417008060, 0.4270732602], [-0.8474712651, 0.4157698301], [-0.8523062111, 0.4040357332], [-0.8561738046, 0.3919482416], [-0.8590485766, 0.3795869545], [-0.8609115959, 0.3670332742], [-0.8617505941, 0.3543698696], [-0.8615600462, 0.3416801327], [-0.8603412070, 0.3290476285], [-0.8581021028, 0.3165555452], [-0.8548574788, 0.3042861464], [-0.8506287015, 0.2923202292], [-0.8454436186, 0.2807365921], [-0.8393363752, 0.2696115164], [-0.8323471889, 0.2590182635], [-0.8245220854, 0.2490265926], [-0.8159125949, 0.2397023015], [-0.8065754131, 0.2311067929], [-0.7965720277, 0.2232966704], [-0.7859683136, 0.2163233657], [-0.7748340988, 0.2102327997]]);
						offset(chamfer = false, delta = -0.0500000000) {
							polygon(paths = [[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106]], points = [[-0.7632427051, 0.2050650804], [-0.9252926022, -0.2020852745], [-0.9700093450, 0.2657206375], [-1.1058794483, 0.3001181310], [-1.1884334351, -0.4411478544], [-0.8117808703, -0.4411478544], [-0.7722237516, -0.5460602097], [-0.6776306417, -0.4641757189], [-0.5510023797, -0.4566267265], [-0.3078575758, 0.1848865277], [0.1066322330, 0.2657206375], [0.0569511884, 0.2052134825], [0.0145369922, 0.1394080272], [-0.0200506819, 0.0691726032], [-0.0463554343, -0.0045660027], [-0.0640301625, -0.0808347772], [-0.0728416407, -0.1586273208], [-0.0726735976, -0.2369171270], [-0.0635282506, -0.3146711276], [-0.0455262766, -0.3908633249], [-0.0189052195, -0.4644883295], [0.0159836444, -0.5345746275], [0.0586799413, -0.6001973996], [0.1086202749, -0.6604907249], [0.1651456608, -0.7146590065], [0.2275102219, -0.7619874706], [0.2948910307, -0.8018515973], [0.3663989680, -0.8337253621], [0.4410904555, -0.8571881769], [0.5179799066, -0.8719304397], [0.5960527313, -0.8777576197], [0.6742787248, -0.8745928249], [0.7516256611, -0.8624778160], [0.8270729136, -0.8415724560], [0.8996249230, -0.8121526001], [0.9683243339, -0.7746064562], [1.0322646278, -0.7294294619], [1.0906020845, -0.6772177473], [1.1425669159, -0.6186602689], [1.1874734235, -0.5545297180], [1.2247290464, -0.4856723251], [1.2538421803, -0.4129966935], [1.2744286648, -0.3374618099], [1.2862168523, -0.2600643899], [1.2890511924, -0.1818257261], [1.2828942849, -0.1037782119], [1.2678273729, -0.0269517181], [1.2440492707, 0.0476399962], [1.2118737408, 0.1190126609], [1.1717253534, 0.1862244826], [1.1241338838, 0.2483885720], [1.0697273223, 0.3046846469], [1.0092235871, 0.3543698562], [0.9434210513, 0.3967885817], [0.8731880081, 0.4313810899], [0.7994512130, 0.4576909178], [0.7231836552, 0.4753708955], [0.6453917182, 0.4841877282], [0.5671019007, 0.4840250738], [-0.5637372369, 0.4166096656], [-0.5695745093, 0.4278787376], [-0.5763062890, 0.4386374027], [-0.5838882455, 0.4488148123], [-0.5922704499, 0.4583439456], [-0.6013977030, 0.4671620510], [-0.6112098998, 0.4752110588], [-0.6216424243, 0.4824379645], [-0.6326265757, 0.4887951769], [-0.6440900207, 0.4942408322], [-0.6559572695, 0.4987390694], [-0.6681501733, 0.5022602664], [-0.6805884387, 0.5047812354], [-0.6931901567, 0.5062853750], [-0.7058723417, 0.5067627802], [-0.7185514783, 0.5062103071], [-0.7311440712, 0.5046315938], [-0.7435671951, 0.5020370366], [-0.7557390403, 0.4984437214], [-0.7675794524, 0.4938753109], [-0.7790104592, 0.4883618894], [-0.7899567845, 0.4819397642], [-0.8003463442, 0.4746512264], [-0.8101107202, 0.4665442731], [-0.8191856118, 0.4576722905], [-0.8275112585, 0.4480937029], [-0.8350328337, 0.4378715878], [-0.8417008060, 0.4270732602], [-0.8474712651, 0.4157698301], [-0.8523062111, 0.4040357332], [-0.8561738046, 0.3919482416], [-0.8590485766, 0.3795869545], [-0.8609115959, 0.3670332742], [-0.8617505941, 0.3543698696], [-0.8615600462, 0.3416801327], [-0.8603412070, 0.3290476285], [-0.8581021028, 0.3165555452], [-0.8548574788, 0.3042861464], [-0.8506287015, 0.2923202292], [-0.8454436186, 0.2807365921], [-0.8393363752, 0.2696115164], [-0.8323471889, 0.2590182635], [-0.8245220854, 0.2490265926], [-0.8159125949, 0.2397023015], [-0.8065754131, 0.2311067929], [-0.7965720277, 0.2232966704], [-0.7859683136, 0.2163233657], [-0.7748340988, 0.2102327997]]);
						}
					}
					union() {
						hull() {
							translate(v = [-0.6143165107, -0.3258568567]) {
								circle(d = 0.0500000000);
							}
							translate(v = [-0.6143165107, -0.1298566655]) {
								circle(d = 0.0500000000);
							}
						}
						hull() {
							translate(v = [-0.6143165107, -0.1298566655]) {
								circle(d = 0.0500000000);
							}
							translate(v = [-0.6143165107, 0.1756718212]) {
								circle(d = 0.0500000000);
							}
						}
						hull() {
							translate(v = [-0.6143165107, 0.1756718212]) {
								circle(d = 0.0500000000);
							}
							translate(v = [0.0016823319, 0.4503173697]) {
								circle(d = 0.0500000000);
							}
						}
					}
					union() {
						translate(v = [0.6076604415, -0.1963117585]) {
							circle(r = 0.5677246549);
						}
						translate(v = [-0.6143165107, -0.3258568567]) {
							circle(r = 0.0845097955);
						}
						translate(v = [-0.6143165107, -0.1298566655]) {
							circle(r = 0.0898237229);
						}
						translate(v = [-0.6143165107, 0.1756718212]) {
							circle(r = 0.0996317614);
						}
					}
				}
				polygon(paths = [[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106]], points = [[-0.7632427051, 0.2050650804], [-0.9252926022, -0.2020852745], [-0.9700093450, 0.2657206375], [-1.1058794483, 0.3001181310], [-1.1884334351, -0.4411478544], [-0.8117808703, -0.4411478544], [-0.7722237516, -0.5460602097], [-0.6776306417, -0.4641757189], [-0.5510023797, -0.4566267265], [-0.3078575758, 0.1848865277], [0.1066322330, 0.2657206375], [0.0569511884, 0.2052134825], [0.0145369922, 0.1394080272], [-0.0200506819, 0.0691726032], [-0.0463554343, -0.0045660027], [-0.0640301625, -0.0808347772], [-0.0728416407, -0.1586273208], [-0.0726735976, -0.2369171270], [-0.0635282506, -0.3146711276], [-0.0455262766, -0.3908633249], [-0.0189052195, -0.4644883295], [0.0159836444, -0.5345746275], [0.0586799413, -0.6001973996], [0.1086202749, -0.6604907249], [0.1651456608, -0.7146590065], [0.2275102219, -0.7619874706], [0.2948910307, -0.8018515973], [0.3663989680, -0.8337253621], [0.4410904555, -0.8571881769], [0.5179799066, -0.8719304397], [0.5960527313, -0.8777576197], [0.6742787248, -0.8745928249], [0.7516256611, -0.8624778160], [0.8270729136, -0.8415724560], [0.8996249230, -0.8121526001], [0.9683243339, -0.7746064562], [1.0322646278, -0.7294294619], [1.0906020845, -0.6772177473], [1.1425669159, -0.6186602689], [1.1874734235, -0.5545297180], [1.2247290464, -0.4856723251], [1.2538421803, -0.4129966935], [1.2744286648, -0.3374618099], [1.2862168523, -0.2600643899], [1.2890511924, -0.1818257261], [1.2828942849, -0.1037782119], [1.2678273729, -0.0269517181], [1.2440492707, 0.0476399962], [1.2118737408, 0.1190126609], [1.1717253534, 0.1862244826], [1.1241338838, 0.2483885720], [1.0697273223, 0.3046846469], [1.0092235871, 0.3543698562], [0.9434210513, 0.3967885817], [0.8731880081, 0.4313810899], [0.7994512130, 0.4576909178], [0.7231836552, 0.4753708955], [0.6453917182, 0.4841877282], [0.5671019007, 0.4840250738], [-0.5637372369, 0.4166096656], [-0.5695745093, 0.4278787376], [-0.5763062890, 0.4386374027], [-0.5838882455, 0.4488148123], [-0.5922704499, 0.4583439456], [-0.6013977030, 0.4671620510], [-0.6112098998, 0.4752110588], [-0.6216424243, 0.4824379645], [-0.6326265757, 0.4887951769], [-0.6440900207, 0.4942408322], [-0.6559572695, 0.4987390694], [-0.6681501733, 0.5022602664], [-0.6805884387, 0.5047812354], [-0.6931901567, 0.5062853750], [-0.7058723417, 0.5067627802], [-0.7185514783, 0.5062103071], [-0.7311440712, 0.5046315938], [-0.7435671951, 0.5020370366], [-0.7557390403, 0.4984437214], [-0.7675794524, 0.4938753109], [-0.7790104592, 0.4883618894], [-0.7899567845, 0.4819397642], [-0.8003463442, 0.4746512264], [-0.8101107202, 0.4665442731], [-0.8191856118, 0.4576722905], [-0.8275112585, 0.4480937029], [-0.8350328337, 0.4378715878], [-0.8417008060, 0.4270732602], [-0.8474712651, 0.4157698301], [-0.8523062111, 0.4040357332], [-0.8561738046, 0.3919482416], [-0.8590485766, 0.3795869545], [-0.8609115959, 0.3670332742], [-0.8617505941, 0.3543698696], [-0.8615600462, 0.3416801327], [-0.8603412070, 0.3290476285], [-0.8581021028, 0.3165555452], [-0.8548574788, 0.3042861464], [-0.8506287015, 0.2923202292], [-0.8454436186, 0.2807365921], [-0.8393363752, 0.2696115164], [-0.8323471889, 0.2590182635], [-0.8245220854, 0.2490265926], [-0.8159125949, 0.2397023015], [-0.8065754131, 0.2311067929], [-0.7965720277, 0.2232966704], [-0.7859683136, 0.2163233657], [-0.7748340988, 0.2102327997]]);
			}
		}
	}
	union() {
		translate(v = [0.6076604415, -0.1963117585]) {
			circle(r = 0.5177246549);
		}
		translate(v = [-0.6143165107, -0.3258568567]) {
			circle(r = 0.0345097955);
		}
		translate(v = [-0.6143165107, -0.1298566655]) {
			circle(r = 0.0398237229);
		}
		translate(v = [-0.6143165107, 0.1756718212]) {
			circle(r = 0.0496317614);
		}
	}
}
/***********************************************
*********      SolidPython code:      **********
************************************************
 
import ezdxf
from solid import *
from solid.utils import *
import os
import sys
import math

#$fn
SEGMENTS = 48 

# python pocket .py <input_file> <thickness> <radius> <output_file>
inputPath = sys.argv[1]
thickness = float(sys.argv[2])
radius = float(sys.argv[3])
outputPath = sys.argv[4]

dxf = ezdxf.readfile(inputPath)
mdl = dxf.modelspace()

#get hole definitions from circles
holeDefs = []
circles = mdl.query('CIRCLE')
for c in circles:
    holeDefs.append([c.get_dxf_attrib("radius"), c.get_dxf_attrib("center")[0], c.get_dxf_attrib("center")[1]])

#get strut definitions from construction lines and polylines
strutDefs = []
lines = mdl.query('LINE[linetype=="DASHED"]')
for l in lines: 
    strutDefs.append([l.get_dxf_attrib("start"),l.get_dxf_attrib("end")])
polylines = mdl.query('POLYLINE[linetype=="DASHED"]')
for p in polylines: 
    n = 0
    while n <= p.__len__()-2:
        strutDefs.append([p.__getitem__(n).dxf.location, p.__getitem__(n+1).dxf.location])
        n += 1

def arcPoly(center, a1, a2, r):
    points = []
    t = 0
    while t <+ 1:
        a = a2-a1
        # switch to positive angle
        if a <= 0:
            a += math.pi*2
        points.append([center[0] + r*math.cos(a1 + a*t), center[1] + r*math.sin(a1 + a*t)])
        t += 1/SEGMENTS
    return points

#get outer plate shape from non-construction polyline
outerPoly = []
outer = mdl.query('POLYLINE[!linetype=="DASHED"]')
n = 0
for o in outer: 
     n = 0
     while n <= o.__len__()-1:
        bulge = o.__getitem__(n).dxf.bulge
        pos = o.__getitem__(n).dxf.location
        if o.__getitem__(n).dxf.bulge == 0:
            outerPoly.append([pos[0], pos[1]])
        else:
            posNext = (o.__getitem__((n+1) %  o.__len__())).dxf.location
            for p in arcPoly(*ezdxf.math.bulge_to_arc(pos,posNext,bulge)):
                outerPoly.append(p)
        n += 1

print(outerPoly)

#generate pocketed geometry
#thickness = min thickness of any part
#radius = fillet radius
def pocketedPlate(thickness, radius):

    def fillet(shape,r):
        return offset(-r)(
            offset(r)(
                shape()
            )
        )

    def addHoles(offset): 
        holes = []
        for c in holeDefs:
            holes.append(translate([c[1],c[2]])(
                circle(c[0]+offset)
                )
            )
        return union()(holes)

    def addStruts():
        struts = []
        for s in strutDefs:
            struts.append(hull()(
                translate([s[0][0],s[0][1]])(
                    circle(d=thickness)
                ),
                translate([s[1][0],s[1][1]])(
                    circle(d=thickness)
                )
                )
            )
        return union()(struts)

    a = fillet(((polygon(outerPoly) - offset(delta = -thickness)(polygon(outerPoly)) + addStruts() + addHoles(thickness)) * polygon(outerPoly)), radius) - addHoles(0)

    return a

a = pocketedPlate(thickness, radius)
scad_render_to_file(a, file_header=f'$fn = {SEGMENTS};', include_orig_code=True)
os.system('cmd /c ""C:\Program Files\OpenSCAD\openscad.com" -o "' + outputPath + '" pocketing.scad"')

# TODO:
# - switch to freecad scripting? (for true arcs) 
 
************************************************/
